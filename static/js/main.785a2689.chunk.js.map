{"version":3,"sources":["gameHelpers.js","tetrominos.js","hooks/useStage.js","hooks/useGameStatus.js","assets/img/bg.png","components/styles/StyledTetris.js","components/styles/StyledStartButton.js","components/StartButton.js","components/styles/StyledDisplay.js","components/Display.js","components/styles/StyledCell.js","components/Cell.js","components/styles/StyledStage.js","components/Stage.js","components/Tetris.js","hooks/usePlayer.js","hooks/useInterval.js","App.js","reportWebVitals.js","index.js"],"names":["createStage","Array","from","fill","checkCollision","player","stage","moveX","x","moveY","y","tetromino","length","pos","TETROMINOS","shape","color","I","J","L","O","S","T","Z","randomTetromino","tetrominos","randTetromino","Math","floor","random","useStage","resetPlayer","useState","setStage","rowsCleared","setRowsCleared","useEffect","updateStage","prevStage","newStage","map","row","cell","forEach","value","collided","reduce","ack","findIndex","prev","unshift","push","sweepRows","StyledTetrisWrapper","styled","div","bgImage","StyledTetris","StyledStartButton","button","StartButton","callback","onClick","StyledDisplay","props","gameOver","Display","text","StyledCell","type","Cell","React","memo","StyledStage","height","width","Stage","Tetris","dropTime","setDropTime","setGameOver","setPlayer","rotate","matrix","dir","rotatedTetro","_","index","col","reverse","useCallback","STAGE_WIDTH","clonedPlayer","JSON","parse","stringify","offset","usePlayer","updatePlayerPos","playerRotate","score","setScore","rows","setRows","level","setLevel","linePoints","calcScore","useGameStatus","console","log","movePlayer","drop","move","keyCode","delay","savedCallback","useRef","current","id","setInterval","clearInterval","useInterval","role","tabIndex","onKeyDown","e","onKeyUp","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.785a2689.chunk.js","sourcesContent":["export const STAGE_WIDTH = 12;\r\nexport const STAGE_HEIGHT = 20;\r\n\r\nexport const createStage = () =>\r\n  Array.from(Array(STAGE_HEIGHT), () =>\r\n    new Array(STAGE_WIDTH).fill([0, \"clear\"])\r\n  );\r\n\r\nexport const checkCollision = (player, stage, { x: moveX, y: moveY }) => {\r\n  for (let y = 0; y < player.tetromino.length; y += 1) {\r\n    for (let x = 0; x < player.tetromino[y].length; x += 1) {\r\n      // 1. check that we are on an actual Tetromino cell\r\n      if (player.tetromino[y][x] !== 0) {\r\n        if (\r\n          // 2. check that our move is inside the game araes height (y)\r\n          // we should not go through the bottom of the play area\r\n          !stage[y + player.pos.y + moveY] ||\r\n          // 3. check that our move is inside the game area width (x)\r\n          !stage[y + player.pos.y + moveY][x + player.pos.x + moveX] ||\r\n          //4. check that the cell we are moving to is not set to clean\r\n          stage[y + player.pos.y + moveY][x + player.pos.x + moveX][1] !==\r\n            \"clear\"\r\n        ) {\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n","export const TETROMINOS = {\r\n  0: { shape: [[0]], color: \"0, 0, 0\" },\r\n  I: {\r\n    shape: [\r\n      [0, \"I\", 0, 0],\r\n      [0, \"I\", 0, 0],\r\n      [0, \"I\", 0, 0],\r\n      [0, \"I\", 0, 0],\r\n    ],\r\n    color: \"80, 227, 230\",\r\n  },\r\n  J: {\r\n    shape: [\r\n      [0, \"J\", 0],\r\n      [0, \"J\", 0],\r\n      [\"J\", \"J\", 0],\r\n    ],\r\n    color: \"36, 95, 223\",\r\n  },\r\n  L: {\r\n    shape: [\r\n      [0, \"L\", 0],\r\n      [0, \"L\", 0],\r\n      [0, \"L\", \"L\"],\r\n    ],\r\n    color: \"223, 173, 36\",\r\n  },\r\n  O: {\r\n    shape: [\r\n      [\"O\", \"O\"],\r\n      [\"O\", \"O\"],\r\n    ],\r\n    color: \"223, 217, 36\",\r\n  },\r\n  S: {\r\n    shape: [\r\n      [0, \"S\", \"S\"],\r\n      [\"S\", \"S\", 0],\r\n      [0, 0, 0],\r\n    ],\r\n    color: \"48, 211, 56\",\r\n  },\r\n  T: {\r\n    shape: [\r\n      [0, 0, 0],\r\n      [\"T\", \"T\", \"T\"],\r\n      [0, \"T\", 0],\r\n    ],\r\n    color: \"132, 61, 198\",\r\n  },\r\n  Z: {\r\n    shape: [\r\n      [\"Z\", \"Z\", 0],\r\n      [0, \"Z\", \"Z\"],\r\n      [0, 0, 0],\r\n    ],\r\n    color: \"227, 78, 78\",\r\n  },\r\n};\r\n\r\nexport const randomTetromino = () => {\r\n  const tetrominos = \"IJLOSTZ\";\r\n  const randTetromino =\r\n    tetrominos[Math.floor(Math.random() * tetrominos.length)];\r\n  return TETROMINOS[randTetromino];\r\n};\r\n","import { useState, useEffect } from \"react\";\r\nimport { createStage } from \"../gameHelpers\";\r\n\r\nexport const useStage = (player, resetPlayer) => {\r\n  const [stage, setStage] = useState(createStage());\r\n  const [rowsCleared, setRowsCleared] = useState(0);\r\n\r\n  useEffect(() => {\r\n    setRowsCleared(0);\r\n\r\n    const sweepRows = (newStage) =>\r\n      newStage.reduce((ack, row) => {\r\n        if (row.findIndex((cell) => cell[0] === 0) === -1) {\r\n          setRowsCleared((prev) => prev + 1);\r\n          ack.unshift(new Array(newStage[0].length).fill([0, \"clear\"]));\r\n          return ack;\r\n        }\r\n        ack.push(row);\r\n        return ack;\r\n      }, []);\r\n\r\n    const updateStage = (prevStage) => {\r\n      // First flush the stage\r\n      const newStage = prevStage.map((row) =>\r\n        row.map((cell) => (cell[1] === \"clear\" ? [0, \"clear\"] : cell))\r\n      );\r\n\r\n      // Them draw the tetromino\r\n      player.tetromino.forEach((row, y) => {\r\n        row.forEach((value, x) => {\r\n          if (value !== 0) {\r\n            newStage[y + player.pos.y][x + player.pos.x] = [\r\n              value,\r\n              `${player.collided ? \"merged\" : \"clear\"}`,\r\n            ];\r\n          }\r\n        });\r\n      });\r\n\r\n      // Then check if we collided\r\n      if (player.collided) {\r\n        resetPlayer();\r\n        return sweepRows(newStage);\r\n      }\r\n\r\n      return newStage;\r\n    };\r\n\r\n    setStage((prev) => updateStage(prev));\r\n  }, [player, resetPlayer]);\r\n\r\n  return [stage, setStage, rowsCleared];\r\n};\r\n","import { useState, useEffect, useCallback } from \"react\";\r\n\r\nexport const useGameStatus = (rowsCleared) => {\r\n  const [score, setScore] = useState(0);\r\n  const [rows, setRows] = useState(0);\r\n  const [level, setLevel] = useState(0);\r\n\r\n  const linePoints = [40, 100, 300, 1200];\r\n\r\n  const calcScore = useCallback(() => {\r\n    // We have score\r\n    if (rowsCleared > 0) {\r\n      // This is how original Tetris score is calculated\r\n      setScore((prev) => prev + linePoints[rowsCleared - 1] * (level + 1));\r\n      setRows((prev) => prev + rowsCleared);\r\n    }\r\n  }, [level, linePoints, rowsCleared]);\r\n\r\n  useEffect(() => {\r\n    calcScore();\r\n  }, [calcScore, rowsCleared, score]);\r\n\r\n  return [score, setScore, rows, setRows, level, setLevel];\r\n};\r\n","export default __webpack_public_path__ + \"static/media/bg.d63cfd51.png\";","import styled from \"styled-components\";\r\nimport bgImage from \"../../assets/img/bg.png\";\r\n\r\nexport const StyledTetrisWrapper = styled.div`\r\n  width: 100vw;\r\n  height: 100vh;\r\n  background: url(${bgImage}) #000;\r\n  background-size: cover;\r\n  overflow: hidden;\r\n`;\r\n\r\nexport const StyledTetris = styled.div`\r\n  display: flex;\r\n  align-items: flex-start;\r\n  padding: 40px;\r\n  margin: 0 auto;\r\n  max-width: 900px;\r\n\r\n  aside {\r\n    width: 100%;\r\n    max-width: 200px;\r\n    display: block;\r\n    padding: 0 20px;\r\n  }\r\n`;\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledStartButton = styled.button`\r\n  box-sizing: border-box;\r\n  margin: 0 0 20px 0;\r\n  padding: 20px;\r\n  min-height: 30px;\r\n  width: 100%;\r\n  border-radius: 20px;\r\n  border: none;\r\n  color: #fff;\r\n  background: #333;\r\n  font-family: Pixel, Arial, Helvetica, sans-serif;\r\n  font-size: 1rem;\r\n  outline: none;\r\n  cursor: pointer;\r\n`;\r\n","import React from \"react\";\r\nimport { StyledStartButton } from \"./styles/StyledStartButton\";\r\n\r\nconst StartButton = ({ callback }) => (\r\n  <StyledStartButton onClick={callback}>START GAME</StyledStartButton>\r\n);\r\n\r\nexport default StartButton;\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledDisplay = styled.div`\r\n  box-sizing: border-box;\r\n  display: flex;\r\n  align-items: center;\r\n  margin: 0 0 20px 0;\r\n  padding: 20px;\r\n  border: 4px solid #333;\r\n  min-height: 30px;\r\n  width: 100%;\r\n  border-radius: 20px;\r\n  color: ${(props) => (props.gameOver ? \"red\" : \"#999\")};\r\n  background: #000;\r\n  font-family: Pixel, Arial, Helvetica, sans-serif;\r\n  font-size: 0.8rem;\r\n`;\r\n","import React from \"react\";\r\nimport { StyledDisplay } from \"./styles/StyledDisplay\";\r\n\r\nconst Display = ({ gameOver, text }) => (\r\n  <StyledDisplay gameOver={gameOver}>{text}</StyledDisplay>\r\n);\r\n\r\nexport default Display;\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledCell = styled.div`\r\n  width: auto;\r\n  background: rgba(${(props) => props.color}, 0.8);\r\n  border: ${(props) => (props.type === 0 ? \"0px solid\" : \"4px solid\")};\r\n  border-bottom-color: rgba(${(props) => props.color}, 0.1);\r\n  border-right-color: rgba(${(props) => props.color}, 1);\r\n  border-top-color: rgba(${(props) => props.color}, 0.1);\r\n  border-left-color: rgba(${(props) => props.color}, 0.3);\r\n`;\r\n","import React from \"react\";\r\nimport { StyledCell } from \"./styles/StyledCell\";\r\nimport { TETROMINOS } from \"../tetrominos\";\r\n\r\nconst Cell = ({ type }) => (\r\n  <StyledCell type={type} color={TETROMINOS[type].color} />\r\n);\r\n\r\nexport default React.memo(Cell);\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledStage = styled.div`\r\n  display: grid;\r\n  grid-template-rows: repeat(\r\n    ${(props) => props.height},\r\n    calc(25vw / ${(props) => props.width})\r\n  );\r\n  grid-template-columns: repeat(${(props) => props.width}, 1fr);\r\n  grid-gap: 1px;\r\n  border: 2px solid #333;\r\n  width: 100%;\r\n  max-width: 25vw;\r\n  background: #111;\r\n`;\r\n","import React from \"react\";\r\nimport Cell from \"./Cell\";\r\nimport { StyledStage } from \"./styles/StyledStage\";\r\n\r\nconst Stage = ({ stage }) => (\r\n  <StyledStage width={stage[0].length} height={stage.length}>\r\n    {stage.map((row) => row.map((cell, x) => <Cell key={x} type={cell[0]} />))}\r\n  </StyledStage>\r\n);\r\n\r\nexport default Stage;\r\n","import React, { useState } from \"react\";\r\n\r\nimport { createStage, checkCollision } from \"../gameHelpers\";\r\n\r\n// custom hooks\r\nimport { usePlayer } from \"../hooks/usePlayer\";\r\nimport { useStage } from \"../hooks/useStage\";\r\nimport { useInterval } from \"../hooks/useInterval\";\r\nimport { useGameStatus } from \"../hooks/useGameStatus\";\r\n\r\n// styled components\r\nimport { StyledTetris, StyledTetrisWrapper } from \"./styles/StyledTetris\";\r\n\r\n// components\r\nimport StartButton from \"./StartButton\";\r\nimport Display from \"./Display\";\r\nimport Stage from \"./Stage\";\r\n\r\nconst Tetris = ({}) => {\r\n  const [dropTime, setDropTime] = useState(null);\r\n  const [gameOver, setGameOver] = useState(false);\r\n\r\n  const [player, updatePlayerPos, resetPlayer, playerRotate] = usePlayer();\r\n  const [stage, setStage, rowsCleared] = useStage(player, resetPlayer);\r\n  const [score, setScore, rows, setRows, level, setLevel] =\r\n    useGameStatus(rowsCleared);\r\n\r\n  console.log(\"re-render\");\r\n\r\n  const movePlayer = (dir) => {\r\n    if (!checkCollision(player, stage, { x: dir, y: 0 })) {\r\n      updatePlayerPos({ x: dir, y: 0 });\r\n    }\r\n  };\r\n\r\n  const startGame = () => {\r\n    // reset everything\r\n    setStage(createStage());\r\n    setDropTime(1000);\r\n    resetPlayer();\r\n    setGameOver(false);\r\n    setScore(0);\r\n    setLevel(0);\r\n    setRows(0);\r\n  };\r\n\r\n  const drop = () => {\r\n    console.log(dropTime);\r\n    // Increase level when player has cleared 10 rows\r\n    if (rows > (level + 1) * 10) {\r\n      setLevel((prev) => prev + 1);\r\n      // Also increase speed\r\n      setDropTime(1000 / (level + 1) + 200);\r\n    }\r\n\r\n    if (!checkCollision(player, stage, { x: 0, y: 1 })) {\r\n      updatePlayerPos({ x: 0, y: 1, collided: false });\r\n    } else {\r\n      // game over\r\n      updatePlayerPos({ x: 0, y: 0, collided: true });\r\n      if (player.pos.y < 1) {\r\n        console.log(\"GAME OVER!!!\");\r\n        setGameOver(true);\r\n        setDropTime(null);\r\n      }\r\n    }\r\n  };\r\n\r\n  const keyUp = ({ keyCode }) => {\r\n    if (!gameOver) {\r\n      console.log(\"interval on\");\r\n      if (keyCode === 40) {\r\n        setDropTime(1000);\r\n      }\r\n    }\r\n  };\r\n\r\n  const dropPlayer = () => {\r\n    console.log(\"interval off\");\r\n    setDropTime(null);\r\n    drop();\r\n  };\r\n\r\n  const move = ({ keyCode }) => {\r\n    if (!gameOver) {\r\n      if (keyCode === 37) {\r\n        movePlayer(-1);\r\n      } else if (keyCode === 39) {\r\n        movePlayer(1);\r\n      } else if (keyCode === 40) {\r\n        dropPlayer();\r\n      } else if (keyCode === 38) {\r\n        playerRotate(stage, 1);\r\n      }\r\n    }\r\n  };\r\n\r\n  useInterval(() => {\r\n    drop();\r\n  }, dropTime);\r\n\r\n  return (\r\n    <StyledTetrisWrapper\r\n      role=\"button\"\r\n      tabIndex=\"0\"\r\n      onKeyDown={(e) => move(e)}\r\n      onKeyUp={keyUp}\r\n    >\r\n      <StyledTetris>\r\n        <Stage stage={stage} />\r\n        <aside>\r\n          {gameOver ? (\r\n            <Display gameOver={gameOver} text=\"GAME OVER\" />\r\n          ) : (\r\n            <div>\r\n              <Display text={`Score:${score}`} />\r\n              <Display text={`Rows:${rows}`} />\r\n              <Display text={`Level:${level}`} />\r\n            </div>\r\n          )}\r\n\r\n          <StartButton callback={startGame} />\r\n        </aside>\r\n      </StyledTetris>\r\n    </StyledTetrisWrapper>\r\n  );\r\n};\r\n\r\nexport default Tetris;\r\n","import { useCallback, useState } from \"react\";\r\nimport { TETROMINOS, randomTetromino } from \"../tetrominos\";\r\nimport { checkCollision, STAGE_WIDTH } from \"../gameHelpers\";\r\n\r\nexport const usePlayer = () => {\r\n  const [player, setPlayer] = useState({\r\n    pos: { x: 0, y: 0 },\r\n    tetromino: TETROMINOS[0].shape,\r\n    collided: false,\r\n  });\r\n\r\n  const rotate = (matrix, dir) => {\r\n    // make the rows to become cols (transpose)\r\n    const rotatedTetro = matrix.map((_, index) =>\r\n      matrix.map((col) => col[index])\r\n    );\r\n\r\n    // Reverse each row to get a rotated matrix\r\n    if (dir > 0) return rotatedTetro.map((row) => row.reverse());\r\n    return rotatedTetro.reverse();\r\n  };\r\n\r\n  const playerRotate = (stage, dir) => {\r\n    const clonedPlayer = JSON.parse(JSON.stringify(player));\r\n    clonedPlayer.tetromino = rotate(clonedPlayer.tetromino, dir);\r\n\r\n    const pos = clonedPlayer.pos.x;\r\n    let offset = 1;\r\n    while (checkCollision(clonedPlayer, stage, { x: 0, y: 0 })) {\r\n      clonedPlayer.pos.x += offset;\r\n      offset = -(offset + (offset > 0 ? 1 : -1));\r\n      if (offset > clonedPlayer.tetromino[0].length) {\r\n        rotate(clonedPlayer.tetromino, -dir);\r\n        clonedPlayer.pos.x = pos;\r\n        return;\r\n      }\r\n    }\r\n    setPlayer(clonedPlayer);\r\n  };\r\n\r\n  const updatePlayerPos = ({ x, y, collided }) => {\r\n    setPlayer((prev) => ({\r\n      ...prev,\r\n      pos: { x: (prev.pos.x += x), y: (prev.pos.y += y) },\r\n      collided,\r\n    }));\r\n  };\r\n\r\n  const resetPlayer = useCallback(() => {\r\n    setPlayer({\r\n      pos: { x: STAGE_WIDTH / 2 - 2, y: 0 },\r\n      tetromino: randomTetromino().shape,\r\n      collided: false,\r\n    });\r\n  }, []);\r\n\r\n  return [player, updatePlayerPos, resetPlayer, playerRotate];\r\n};\r\n","import { useEffect, useRef } from \"react\";\r\n\r\nexport function useInterval(callback, delay) {\r\n  const savedCallback = useRef();\r\n  // Remember the latest callback.\r\n  useEffect(() => {\r\n    savedCallback.current = callback;\r\n  }, [callback]);\r\n\r\n  // Set up the interval.\r\n  useEffect(() => {\r\n    function tick() {\r\n      savedCallback.current();\r\n    }\r\n    if (delay !== null) {\r\n      const id = setInterval(tick, delay);\r\n      return () => {\r\n        clearInterval(id);\r\n      };\r\n    }\r\n  }, [delay]);\r\n}\r\n","import React from \"react\";\r\nimport Tetris from \"./components/Tetris\";\r\n\r\nconst App = () => (\r\n  <div className=\"APP\">\r\n    <Tetris />\r\n  </div>\r\n);\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}